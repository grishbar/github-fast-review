window.comments = [
  {
    label: 'настройка eslint',
    comment: `\`можно лучше\`
    в принципе это вполне читаемо, но, чтобы сделать прям красиво и исправить все стилистические недочеты, то можешь установить и настроить eslint для этого запусти вот эту команду 
    \`npm i eslint-config-airbnb eslint-plugin-jsx-a11y --save-dev\`
    далее надо создать файлик \`.eslintrc\` в корне проекта и туда записать:
    \`\`\`
    {
        "extends": [
          "react-app",
          "airbnb",
          "plugin:jsx-a11y/recommended"
        ],
        "plugins": [
          "jsx-a11y"
        ],
        "rules": {
          "semi": 0,
          "react/jsx-filename-extension": [1, { "extensions": [".js", ".jsx", "tsx"] }]
        }
    }
    \`\`\`
    после этих действий у тебя в коде будет везде подсвечиваться некорректный синтаксис, сможешь исправить все ошибки и получится великолепный чистый код`
  },
  {
    label: 'излишние комментарии',
    comment: `\`можно лучше\`
    комментарии которые не документируют дальнейший код (не говорят, что будет происходит в последующих строчках под ними) должны быть удалены`,
  },
  {
    label: 'названия переменных',
    comment: `\`можно лучше\`
    Требуется называть переменные и функции так, как будто их будут читать совершенно незнакомые люди. Так, чтобы любой человек который будет видеть твою переменную смог примерно понять, что в ней находится. Побольше насчет корректного названия переменных можно почитать [здесь](https://thecode.media/variables/)`,
  },
  {
    label: 'разделение state',
    comment: `\`надо исправить\`
    такие состояния компонента нужно разделять, во первых это разные абстракции поэтому семантически так будет более корректно, во вторых если у тебя будет меняться хоть одно из этих полей, то будет перерендываться все поля с ними связанными а не только измененные, что не очень, теряешь в производительности, также манипулировать с разделенными примитивными объектами намного проще, чем с большим сложным объектом
    https://reactjs.org/docs/hooks-faq.html#should-i-use-one-or-many-state-variables`,
  },
  {
    label: 'абсолютные пути',
    comment: `\`можно лучше\`
    такие неудобные относительные пути можно избежать если доработать tsconfig, добавь в него строчку - "baseUrl": "src", и сможешь импортировать просто как:
    import { headerButtonProTypes } from 'utils/type';
    https://stackoverflow.com/questions/59146997/how-to-avoid-very-long-paths-and-use-absolute-paths-within-a-create-react-app-pr`,
  },
  {
    label: 'url для запроса',
    comment: `\`надо исправить\`
    Имя переменной url слишком абстрактное, оно не несет особого смысла, и такие константые переменные принято выносить из компонента, еще лучше в отдельный файл и называть в SNAKE_CASE, что позволяет сразу понять, что эта переменная константна и менять ее не надо`,
  },
  {
    label: 'константные переменные',
    comment: `\`надо исправить\`
    такие константые переменные должны находиться снаружи компоненты и быть называны в SNAKE_CASE, так сразу становится понятно, что это переменная константна и меняться не должна`,
  },
  {
    label: 'initial state при ошибке в запросе',
    comment: `\`надо исправить\`
    При ошибке в запросе надо возвращать - initialState и error: true , так как не хочется держать в хранилище потенциально невалидные данные`,
  },
  {
    label: 'создание функций внутри jsx',
    comment: `\`надо исправить\`
    [нельзя создавать функции внутри jsx](https://qastack.ru/programming/36677733/why-shouldnt-jsx-props-use-arrow-functions-or-bind), это плохо влияет на производительность, и не [рекомендуется разработчиками реакта](https://ru.reactjs.org/docs/faq-functions.html)`,
  },
  {
    label: 'обработка статуса ответа при запросе',
    comment: `\`надо исправить\`
    При совершении запроса, он может успешно выполнится и вернуться не с 2xx статусом и соответственно он будет содержать не данные для ингредиентов, и не совсем очевидно, но такой запрос не попадет в блок catch, только если у тебя не случится какая то скриптовая ошибка тут, например  в json не полчится преобразовать, только тогда ты попадешь в catch. Соответственно тебе тут нужно если не [response.ok](https://developer.mozilla.org/en-US/docs/Web/API/Response/ok) выкидывать ошибку, тогда тебя перекинет в блок catch`,
  },
  {
    label: 'магические переменные',
    comment: `\`надо исправить\`
    "магических" переменных не должно быть в твоем коде, так как сейчас разработчику со стороны придется лезть в интрнет, чтобы понять, что за число 27 такое, вынеси пожалуйста это число в константу и дай ей осмысленное название`,
  },
  {
    label: 'инлайновые стили',
    comment: `\`надо исправить\`
    инлайновые стили это очень плохая практика, старайся без очень сильной необходимости неиспользовать их, вот [здесь](https://htmlacademy.ru/blog/boost/frontend/inline) есть статься про это`,
  },
]